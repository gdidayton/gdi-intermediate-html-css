slides:
  -
    content: |
      # Responsive Web Design<br><small>RWD</small>
      ###### Intermediate HTML and CSS<!-- .element: class="short-title" -->

    options:
      class: section-card

  -
    content: |
      RWD is a methodology for building websites, based<br>on an ideal of providing the same experience and<br>content regardless of device or browser.

      ![Responsive Design](images/responsive-design.png)

  -
    content: |
      ## Why do we need RWD?

      - 77% of Americans own a smartphone of some kind. ([Pew 2017](http://www.pewinternet.org/fact-sheet/mobile/))
      - 10% of smartphone owners only have internet access through their phone ([Pew 2017](http://www.pewinternet.org/fact-sheet/mobile/))
      - Nearly half of all Americans own a tablet ([Pew 2015](http://www.pewinternet.org/2015/10/29/technology-device-ownership-2015/))

  -
    content: |
      ## Why it's awesome

      RWD modifies the presentation of a site, without modifying the content of the page. So no matter what, every user has access to the same information.

      ![](images/responsive-example.png)


  -
    content: |
      ## How did RWD come about?

      - **2007:** Apple launches the iPhone and soon many millions of people have a desktop-quality web browser in their pocket.
      - **2010:** Ethan Marcotte coined the term “responsive web design” in an article on the web magazine, [A List Apart](http://alistapart.com/article/responsive-web-design)
      - **2011** Marcotte expands on his initial article, writing the book *[Responsive Web Design](https://abookapart.com/products/responsive-web-design)*.
      - **2012**, RWD was considered the #2 trend in web design.
      - **2013** Considered “The Year of Responsive Web Design” because RWD was, and still is, a cost effective alternative to mobile apps.


  -
    content: |
      ### The Ingredients of RWD
      <hr><br>

      1. Flexible, grid-based layout
      2. Flexible images and media
      3. Media queries

  -
    content: |
      ### Flexible, grid-based layout
      <hr>

      By using percentage-based widths on<br>elements, the content is able to grow<br>and shrink with the device or browser

  -
    content: |
      ## How they work

      - First, divide the content up into a set of columns.
      - Then, we design elements with **percentage widths** instead of being stuck with specific pixel dimensions.
      - As the screen width changes, the grids change in width to scale with the device.
      - If needed, maximum width for the container can be used to stop the grid columns from growing.

  -
    content: |
      ### Flexible images
      <hr>

      Making images squishy and loveable

  -
    content: |
      Text scales easily on smaller devices,<br>but images are a bit tricky.

  -
    content: |
      Images will overflow their container<br>elements if they're too big for them.

      That's annoying.

  -
    content: |
      ### The solution: `max-width`
      <hr>

      <div class="grid grid-1-2 grid-stretch util-margin-t2">
      <div>
      ```css
      img {
        max-width: 100%;
      }
      ```
      </div>
      <div>

      By using `max-width` on images, they will only expand to the size of their parent.<br><br><br>
      </div>
      </div>

  -
    content: |
      ### The solution: `max-width`
      <hr>

      <div class="grid grid-1-2 grid-stretch util-margin-t2">
      <div>
      ```css
      img {
        max-width: 100%;
      }
      ```
      </div>
      <div>

      The `max-width` also causes the image to not exceed its natural size, so images don’t get blown out and pixelated by expanding too much.
      </div>
      </div>

  -
    content: |
      ## Media Queries
      <hr>
      Device condition dependent styling

  -
    content: |

      Media queries allow applying certain CSS for specific situations.

      - Print Media `@media print {...}`
      - Screen size `@media (min-width: 60em)`
      - Device Orientation `@media (orientation: portrait)`
      - Screen resolution `@media (min-resolution: 2dppx)`

  -
    content: |
      ### Mobile First
      <hr>

      The ideal way of writing media queries

  -
    content: |
      Mobile first means writing all base CSS for<br>smallest screens first without media queries.

  -
    content: |
      This allows us to simplify the user flow to its<br>basic elements and then enhance it with<br>media queries as the screen size increases.


  -
    hidden: true
    # This slide is innaccurate, needs a rewrite.
    content: |
      ## Include Media Queries Last

      They will overwrite previous styles because they are last in the cascade.

      Here's the CSS for #header-image

      ![](images/mq-normal-style.png) <!-- .element: width="380px" -->>

      And here are the media queries that call for the larger image to be used for screens over 1200px wide, and to turn off the header image if the site is printed.

      ![](images/mq-larger-img.png) <!-- .element: height="120px" -->
      ![](images/mq-print.png) <!-- .element: height="120px" -->

  -
    hidden: true
    content: |
      ## Common Media Queries

      small screens with resolutoins of approximately 320 pixels

      ```css
      /* Small-size screens */
      @media (min-width: 20em) {
        /* Styles */
      }
      ```

      ```css
      /* Medium-size screens ----------- */
      @media (min-width : 48em) {
        /* Styles */
      }
      ```

  -
    hidden: true
    content: |
      ## How they work

      Rather than looking for a type of device, they look at the capability of the device. You can use them to check for all sorts of things.

      - Width &amp; height of the viewport
      - Width &amp; height of the device
      - Orientation - landscape or portrait
      - Resolution - retina or normal

  -
    hidden: true
    content: |
      ## Phone:

      ![](images/media-queries-phone.png)

  -
    hidden: true
    content: |
      ## Tablet

      ![](images/media-queries-tablet.png)

  -
    hidden: true
    content: |
      ## Laptop

      ![](images/media-queries-desktop.png)

  -
    content: |
      ### Viewport Meta
      <hr>

      The final technical piece for RWD on smartphones

  -
    content: |

      Use this to control the size of the viewport.

      ```html
      <meta name="viewport" content="width=device-width,user-scalable=true">
      ```

      `width=device-width` makes the<br>viewport the size of the device.<br><small>Often mobile artificially report their viewport as a desktop-size screen.</small>

      `user-scalable=true` allows the user<br>to pinch and zoom on your site.<br><small>This a browser default, disabling this can be a significant accessibility issue.</small>

  -
    content: |
      ### Let's develop it!
      <hr><br>

      - Test your site on a phone (or you can resize<br>your browser), and find ways to improve it.
      - Add the viewport meta tag to the HTML.
      - Use media queries to adjust the design<br>and improve legibilty.
